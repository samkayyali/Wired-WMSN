global opt
set opt(chan)       Channel/WirelessChannel
set opt(prop)       Propagation/TwoRayGround
set opt(netif)      Phy/WirelessPhy
set opt(mac)        Mac/802_11
set opt(ifq)        Queue/DropTail/PriQueue
set opt(ll)         LL
set opt(ant)        Antenna/OmniAntenna
#set opt(x)             670   
set opt(x)             670
#set opt(y)              670 
set opt(y)              670
set opt(seed)          0.0
set opt(ifqlen)         50   
set opt(tr)          wired-and-wireless.tr
set opt(namtr)       wired-and-wireless.nam
set opt(nn)             3                       
set opt(adhocRouting)   DSDV                      
set opt(cp)             ""                        
#set opt(sc)             "scen"
set opt(sc)             ""   
set opt(stop)           10                           
set num_wired_nodes      10
set num_bs_nodes         2


set ns_   [new Simulator]
# set up for hierarchical routing
  $ns_ node-config -addressType hierarchical
  AddrParams set domain_num_ 3          
  lappend cluster_num 10 1 1                
  AddrParams set cluster_num_ $cluster_num
  lappend eilastlevel 1 1 1 1 1 1 1 1 1 1 4 1              
  AddrParams set nodes_num_ $eilastlevel 

  set tracefd  [open $opt(tr) w]
  $ns_ trace-all $tracefd
  set namtracefd [open $opt(namtr) w]
  $ns_ namtrace-all $namtracefd


  set topo   [new Topography]
  $topo load_flatgrid $opt(x) $opt(y)
  # god needs to know the number of all wireless interfaces
  create-god [expr $opt(nn) + $num_bs_nodes]


#######################################################
#######################################################
#######################################################
set chan_1 [new $opt(chan)]
set chan_2 [new $opt(chan)]
set chan_3 [new $opt(chan)]
#######################################################
#######################################################
#######################################################

  #create wired nodes
  set temp {0.0.0 0.1.0 0.2.0 0.3.0 0.4.0 0.5.0 0.6.0 0.7.0 0.8.0 0.9.0}        
  for {set i 0} {$i < $num_wired_nodes} {incr i} {
      set W($i) [$ns_ node [lindex $temp $i]]
  } 
  $ns_ node-config -adhocRouting $opt(adhocRouting) \
                 -llType $opt(ll) \
                 -macType $opt(mac) \
                 -ifqType $opt(ifq) \
                 -ifqLen $opt(ifqlen) \
                 -antType $opt(ant) \
                 -propInstance [new $opt(prop)] \
                 -phyType $opt(netif) \
                 -channel [new $opt(chan)] \
                 -topoInstance $topo \
                 -wiredRouting ON \
                 -agentTrace ON \
                 -routerTrace OFF \
                 -macTrace OFF



#######################################################
#######################################################
#######################################################
# define color index
$ns_ color 0 blue
$ns_ color 1 red
$ns_ color 2 chocolate
$ns_ color 3 red
$ns_ color 4 brown
$ns_ color 5 tan
$ns_ color 6 gold
$ns_ color 7 black

#set node_(0) [$ns_ node 1.0.1]
#$ns_ at 0.0 "$node_(0) color blue"
#$ns(0) color "0"
#$ns(0) shape "circle"
#set n(1) [$ns_ node]
#$ns at 0.0 "$n(1) color black"
#$ns at 2.0 "$n(1) color red"
#$ns at 4.0 "$n(1) color black"
#$n(1) color "blue"
#$n(1) shape "circle"
#set n(2) [$ns_ node]
#$n(2) color "tan"
#$n(2) shape "circle"
#######################################################
#######################################################
#######################################################


  set temp {1.0.0 1.0.1 1.0.2 1.0.3}   
  set BS(0) [$ns_ node [lindex $temp 0]]
  set BS(1) [$ns_ node 2.0.0]
  $BS(0) random-motion 0 
  $BS(1) random-motion 0

  $BS(0) set X_ 1.0
  $BS(0) set Y_ 2.0
  $BS(0) set Z_ 0.0
  
  $BS(1) set X_ 650.0
  $BS(1) set Y_ 600.0
  $BS(1) set Z_ 0.0
  
  #configure for mobilenodes
  $ns_ node-config -wiredRouting OFF

  for {set j 0} {$j < $opt(nn)} {incr j} {
    set node_($j) [ $ns_ node [lindex $temp \
            [expr $j+1]] ]
    $node_($j) base-station [AddrParams addr2id [$BS(0) node-addr]]
  }
  #create links between wired and BS nodes

  ###############################################################################
  ###############################################################################
  $ns_ duplex-link $W(0) $W(1) 0.3Mb 10ms DropTail
  $ns_ duplex-link $W(1) $W(2) 0.3Mb 10ms DropTail
  $ns_ duplex-link $W(2) $W(3) 0.3Mb 10ms DropTail
  $ns_ duplex-link $W(1) $W(4) 0.3Mb 10ms DropTail
  $ns_ duplex-link $W(3) $W(5) 0.5Mb 10ms DropTail
  $ns_ duplex-link $W(4) $W(5) 0.5Mb 10ms DropTail
  $ns_ duplex-link $W(2) $W(6) 0.5Mb 10ms DropTail
  $ns_ duplex-link $W(6) $W(7) 0.5Mb 10ms DropTail
  $ns_ duplex-link $W(7) $W(8) 0.5Mb 10ms DropTail
  $ns_ duplex-link $W(8) $W(5) 0.5Mb 10ms DropTail
  $ns_ duplex-link $W(9) $W(8) 0.5Mb 10ms DropTail

  $ns_ duplex-link $W(1) $BS(0) 5Mb 2ms DropTail
  $ns_ duplex-link $W(2) $BS(1) 5Mb 2ms DropTail

  #Give node position (for NAM)
  $ns_ duplex-link-op $W(0) $W(1) orient right
  $ns_ duplex-link-op $W(1) $W(2) orient right
  $ns_ duplex-link-op $W(2) $W(3) orient up
  $ns_ duplex-link-op $W(1) $W(4) orient up-left
  $ns_ duplex-link-op $W(3) $W(5) orient left-up
  $ns_ duplex-link-op $W(4) $W(5) orient right-up
  $ns_ duplex-link-op $W(2) $W(6) orient right
  $ns_ duplex-link-op $W(6) $W(7) orient right-up
  $ns_ duplex-link-op $W(7) $W(8) orient left-up
  $ns_ duplex-link-op $W(8) $W(5) orient left
  $ns_ duplex-link-op $W(8) $W(9) orient right
  ###############################################################################
  ###############################################################################

  #$ns_ duplex-link $W(0) $W(1) 5Mb 2ms DropTail
  #$ns_ duplex-link $W(1) $BS(0) 5Mb 2ms DropTail
  #$ns_ duplex-link $W(1) $BS(1) 5Mb 2ms DropTail
  #$ns_ duplex-link-op $W(0) $W(1) orient down
  #$ns_ duplex-link-op $W(1) $BS(0) orient left-down
  #$ns_ duplex-link-op $W(1) $BS(1) orient right-down

  # setup TCP connections
  set tcp1 [new Agent/TCP]
  $tcp1 set class_ 2
  set sink1 [new Agent/TCPSink]
  $ns_ attach-agent $node_(0) $tcp1
  #$ns_ attach-agent $W(0) $sink1
  ##############################################################################
  $ns_ attach-agent $W(5) $sink1
  ##############################################################################
  $ns_ connect $tcp1 $sink1
  set ftp1 [new Application/FTP]
  $ftp1 attach-agent $tcp1
  $ns_ at 1.0 "$ftp1 start"

  set tcp2 [new Agent/TCP]
  $tcp2 set class_ 2
  set sink2 [new Agent/TCPSink]
  #$ns_ attach-agent $W(1) $tcp2
  #############################################################################
  $ns_ attach-agent $W(0) $tcp2
  #############################################################################
  $ns_ attach-agent $node_(2) $sink2
  $ns_ connect $tcp2 $sink2
  set ftp2 [new Application/FTP]
  $ftp2 attach-agent $tcp2
  $ns_ at 1.0 "$ftp2 start"
  
  for {set i 0} {$i < $opt(nn)} {incr i} {
      $ns_ initial_node_pos $node_($i) 30+i*100 ;#30+i*100 >> 50
   }



#################################################################
#################################################################
#################################################################
$ns_ at 0.0 "$node_(0) setdest 100.0 100.0 3000.0"
$ns_ at 0.0 "$node_(1) setdest 200.0 200.0 3000.0"
$ns_ at 0.0 "$node_(2) setdest 300.0 200.0 3000.0"
set sink0 [new Agent/LossMonitor]
set sink1 [new Agent/LossMonitor]
set sink2 [new Agent/LossMonitor]

#$ns attach-agent $sink2 $sink3
set tcp3 [new Agent/TCP]
$ns_ attach-agent $node_(0) $tcp3
set tcp4 [new Agent/TCP]
$ns_ attach-agent $node_(1) $tcp4
set tcp5 [new Agent/TCP]
$ns_ attach-agent $node_(2) $tcp5

proc attach-CBR-traffic { node sink size interval } {
   #Get an instance of the simulator
   set ns_ [Simulator instance]
   #Create a CBR  agent and attach it to the node
   set cbr [new Agent/CBR]
   $ns_ attach-agent $node $cbr
   $cbr set packetSize_ $size
   $cbr set interval_ $interval

   #Attach CBR source to sink;
   $ns_ connect $cbr $sink
   return $cbr
  }


 # for {set j 0} {$j < 30} {incr j} {
  #  set cbr($j) [ attach-CBR-traffic $node_(2) $sink0 1000 .010]
            
   # $ns_ at ($j) "$cbr($j) start"
  #}

set cbr0 [attach-CBR-traffic $node_(2) $sink1 1000 .010]
$ns_ at 0.5 "$cbr0 start"
set cbr1 [attach-CBR-traffic $node_(2) $sink1 1000 .012]
$ns_ at 0.7 "$cbr0 start"
set cbr2 [attach-CBR-traffic $node_(2) $sink1 1000 .014]
$ns_ at 1.2 "$cbr0 start"
set cbr2 [attach-CBR-traffic $node_(2) $sink1 1000 .016]
$ns_ at 1.4 "$cbr0 start"
set cbr2 [attach-CBR-traffic $node_(2) $sink1 1000 .018]
$ns_ at 1.6 "$cbr0 start"
set cbr12 [attach-CBR-traffic $node_(1) $sink1 1000 0.019]
$ns_ at 3.0 "$cbr12 start"
set cbr0 [attach-CBR-traffic $node_(1) $sink1 1000 .010]
$ns_ at 0.5 "$cbr0 start"
set cbr1 [attach-CBR-traffic $node_(1) $sink1 1000 .012]
$ns_ at 0.7 "$cbr0 start"
set cbr2 [attach-CBR-traffic $node_(1) $sink1 1000 .014]
$ns_ at 1.2 "$cbr0 start"
set cbr2 [attach-CBR-traffic $node_(1) $sink1 1000 .016]
$ns_ at 1.4 "$cbr0 start"
set cbr2 [attach-CBR-traffic $node_(1) $sink1 1000 .018]
$ns_ at 1.6 "$cbr0 start"


#################################################################
#################################################################
#################################################################




  for {set i } {$i < $opt(nn) } {incr i} {
      $ns_ at $opt(stop).0000010 "$node_($i) reset";
  }
  $ns_ at $opt(stop).0000010 "$BS(0) reset";

  $ns_ at $opt(stop).1 "puts \"NS EXITING...\" ; $ns_ halt"

  puts "Starting Simulation..."
  $ns_ run
